# Generated by Django 5.2 on 2025-05-01 00:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(blank=True, help_text='CSS icon class name', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MentorshipProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Resource Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('athlete', 'Athlete'), ('psychologist', 'Psychologist'), ('coach', 'Mental Coach'), ('nutritionist', 'Nutritionist'), ('admin', 'Administrator')], default='athlete', max_length=20)),
                ('sport', models.CharField(blank=True, choices=[('boxing', 'Boxing'), ('wrestling', 'Wrestling'), ('judo', 'Judo'), ('karate', 'Karate'), ('taekwondo', 'Taekwondo'), ('mma', 'Mixed Martial Arts'), ('other', 'Other')], max_length=20, null=True)),
                ('level', models.CharField(blank=True, choices=[('amateur', 'Amateur'), ('semi-pro', 'Semi-Professional'), ('professional', 'Professional'), ('elite', 'Elite')], max_length=20, null=True)),
                ('qualifications', models.CharField(blank=True, max_length=255, null=True)),
                ('years_experience', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('town', models.CharField(blank=True, max_length=100, null=True)),
                ('quartier', models.CharField(blank=True, max_length=100, null=True)),
                ('account_status', models.CharField(choices=[('pending', 'Pending Verification'), ('active', 'Active'), ('blocked', 'Blocked'), ('suspended', 'Temporarily Suspended')], default='pending', max_length=20)),
                ('is_verified_professional', models.BooleanField(default=False)),
                ('license_number', models.CharField(blank=True, max_length=100, null=True)),
                ('certification_document', models.FileField(blank=True, help_text='Upload your professional certification or license', null=True, upload_to='certification_documents/')),
                ('cv_document', models.FileField(blank=True, help_text='Upload your professional CV or resume', null=True, upload_to='cv_documents/')),
                ('additional_documents', models.FileField(blank=True, help_text='Upload any additional supporting documents', null=True, upload_to='additional_documents/')),
                ('verification_notes', models.TextField(blank=True, null=True)),
                ('membership_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Monthly membership fee based on user type', max_digits=8)),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True)),
                ('last_payment_date', models.DateTimeField(blank=True, null=True)),
                ('next_payment_due', models.DateTimeField(blank=True, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('campay_reference', models.CharField(blank=True, max_length=255, null=True)),
                ('campay_transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('campay_status', models.CharField(blank=True, max_length=50, null=True)),
                ('campay_response', models.JSONField(blank=True, null=True)),
                ('payment_receipt', models.FileField(blank=True, help_text='PDF receipt for membership payment', null=True, upload_to='receipts/')),
                ('terms_accepted', models.BooleanField(default=False)),
                ('social_provider', models.CharField(blank=True, max_length=20, null=True)),
                ('social_uid', models.CharField(blank=True, max_length=200, null=True)),
                ('date_verified', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnonymousQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('response', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('answered', 'Answered'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anonymous_questions', to=settings.AUTH_USER_MODEL)),
                ('respondent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answered_questions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('duration', models.PositiveIntegerField(default=60, help_text='Duration in minutes', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180)])),
                ('reason', models.TextField(help_text='Reason for the appointment')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('canceled', 'Canceled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('response_message', models.TextField(blank=True, help_text="Specialist's response to the appointment request", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('jitsi_room_id', models.CharField(blank=True, max_length=255, null=True)),
                ('jitsi_room_password', models.CharField(blank=True, max_length=64, null=True)),
                ('jitsi_room_created', models.BooleanField(default=False)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_appointments', to=settings.AUTH_USER_MODEL)),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_appointments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_private', models.BooleanField(default=True, help_text='Whether this note is private to the author')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='backend.appointmentrequest')),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(help_text='Review comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='backend.appointmentrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('difficulty_level', models.CharField(choices=[('basic', 'Basic'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=False, help_text='Whether this assessment is available to all athletes')),
                ('estimated_time_minutes', models.PositiveIntegerField(default=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('show_results_immediately', models.BooleanField(default=True)),
                ('require_psychologist_review', models.BooleanField(default=False)),
                ('allow_retake', models.BooleanField(default=True)),
                ('minimum_days_between_retakes', models.PositiveIntegerField(default=7, help_text='Minimum days required between retakes')),
                ('creator', models.ForeignKey(limit_choices_to={'user_type__in': ['psychologist', 'admin']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='backend.assessmentcategory')),
            ],
        ),
        migrations.CreateModel(
            name='AssignedAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.assessment')),
                ('assigned_by', models.ForeignKey(limit_choices_to={'user_type': 'psychologist'}, on_delete=django.db.models.deletion.CASCADE, related_name='assignments_given', to=settings.AUTH_USER_MODEL)),
                ('athlete', models.ForeignKey(limit_choices_to={'user_type': 'athlete'}, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_assessments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('reviewed', 'Reviewed by Psychologist')], default='in_progress', max_length=20)),
                ('scores', models.JSONField(blank=True, null=True)),
                ('completion_time_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='backend.assessment')),
                ('athlete', models.ForeignKey(limit_choices_to={'user_type': 'athlete'}, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_responses', to=settings.AUTH_USER_MODEL)),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responses', to='backend.assignedassessment')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='JournalPrompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_prompts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JournalTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('structure', models.JSONField(help_text='JSON structure defining the template fields')),
                ('is_public', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('verification_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProgressMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('min_value', models.FloatField()),
                ('max_value', models.FloatField()),
                ('default_goal', models.FloatField(blank=True, null=True)),
                ('higher_is_better', models.BooleanField(default=True, help_text='Whether higher values represent improvement')),
                ('assessment_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='backend.assessmentcategory')),
                ('created_by', models.ForeignKey(limit_choices_to={'user_type__in': ['psychologist', 'admin']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AthleteMetricProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('date', models.DateField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('assessment_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_metrics', to='backend.assessmentresponse')),
                ('athlete', models.ForeignKey(limit_choices_to={'user_type': 'athlete'}, on_delete=django.db.models.deletion.CASCADE, related_name='metric_progress', to=settings.AUTH_USER_MODEL)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='athlete_progress', to='backend.progressmetric')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PsychologistReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('comments', models.TextField()),
                ('recommendations', models.TextField()),
                ('follow_up_needed', models.BooleanField(default=False)),
                ('score_adjustments', models.JSONField(blank=True, null=True)),
                ('assessment_response', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='psychologist_review', to='backend.assessmentresponse')),
                ('psychologist', models.ForeignKey(limit_choices_to={'user_type': 'psychologist'}, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('help_text', models.TextField(blank=True, null=True)),
                ('question_type', models.CharField(choices=[('likert_5', '5-point Likert Scale'), ('likert_7', '7-point Likert Scale'), ('yes_no', 'Yes/No'), ('multiple_choice', 'Multiple Choice'), ('slider', 'Slider'), ('text', 'Open Text')], max_length=20)),
                ('required', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('reverse_scoring', models.BooleanField(default=False, help_text='Whether this question should be reverse-scored')),
                ('weight', models.FloatField(default=1.0, help_text='Weight of this question in the overall score')),
                ('choices', models.JSONField(blank=True, help_text='JSON array of choices for multiple choice questions', null=True)),
                ('min_value', models.IntegerField(blank=True, null=True)),
                ('max_value', models.IntegerField(blank=True, null=True)),
                ('step', models.FloatField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='backend.assessment')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='RecommendedSpecialist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_reason', models.TextField()),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority level (1 = highest)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment_response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_specialists', to='backend.assessmentresponse')),
                ('specialist', models.ForeignKey(limit_choices_to={'user_type__in': ['psychologist', 'coach', 'nutritionist']}, on_delete=django.db.models.deletion.CASCADE, related_name='specialist_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='ResponseScale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('min_score', models.FloatField()),
                ('max_score', models.FloatField()),
                ('ranges', models.JSONField(help_text='JSON array of interpretation ranges with labels')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scales', to='backend.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(help_text='Professional biography')),
                ('expertise_areas', models.TextField(help_text='Areas of expertise or specialization')),
                ('education', models.TextField(help_text='Educational background')),
                ('languages', models.CharField(help_text='Languages spoken', max_length=255)),
                ('hourly_rate', models.DecimalField(decimal_places=2, help_text='Hourly consultation rate', max_digits=8)),
                ('session_duration_options', models.CharField(default='30,45,60,90', help_text='Available session durations in minutes (comma separated values)', max_length=255)),
                ('availability', models.JSONField(default=dict, help_text='JSON representing weekly availability schedule')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating from 0 to 5', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('review_count', models.PositiveIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='specialist_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SuccessStory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=220)),
                ('content', models.TextField()),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='success_stories/')),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='success_stories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Success stories',
                'ordering': ['-is_featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('max_participants', models.PositiveIntegerField(default=10)),
                ('frequency', models.CharField(choices=[('one-time', 'One-time Session'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly')], max_length=20)),
                ('meeting_link', models.URLField(blank=True, null=True)),
                ('meeting_password', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facilitator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facilitated_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SupportGroupParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('declined', 'Declined'), ('left', 'Left Group')], default='pending', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='backend.supportgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('group', 'user')},
            },
        ),
        migrations.CreateModel(
            name='SupportGroupSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('meeting_link', models.URLField(blank=True, null=True)),
                ('meeting_password', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='backend.supportgroup')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=220, unique=True)),
                ('content', models.TextField()),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threads', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threads', to='backend.category')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='backend.comment')),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='backend.thread')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='WellnessResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('content_type', models.CharField(choices=[('article', 'Article'), ('video', 'Video'), ('audio', 'Audio'), ('pdf', 'PDF Document'), ('exercise', 'Interactive Exercise')], max_length=20)),
                ('description', models.TextField()),
                ('content', models.TextField(blank=True, help_text='HTML content for articles', null=True)),
                ('external_url', models.URLField(blank=True, help_text='URL for external content like videos', null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='wellness_resources/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='resource_thumbnails/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=False)),
                ('featured', models.BooleanField(default=False)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=255)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='backend.resourcecategory')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_resources', to=settings.AUTH_USER_MODEL)),
                ('related_resources', models.ManyToManyField(blank=True, to='backend.wellnessresource')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('content', models.TextField()),
                ('mood', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('neutral', 'Neutral'), ('bad', 'Bad'), ('terrible', 'Terrible')], max_length=20)),
                ('energy_level', models.CharField(blank=True, choices=[('very_high', 'Very High'), ('high', 'High'), ('moderate', 'Moderate'), ('low', 'Low'), ('very_low', 'Very Low')], max_length=20, null=True)),
                ('stress_level', models.CharField(blank=True, choices=[('none', 'None'), ('mild', 'Mild'), ('moderate', 'Moderate'), ('high', 'High'), ('severe', 'Severe')], max_length=20, null=True)),
                ('sleep_hours', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=255)),
                ('is_private', models.BooleanField(default=True)),
                ('shared_with', models.ManyToManyField(blank=True, limit_choices_to={'user_type__in': ['psychologist', 'coach']}, related_name='shared_journal_entries', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Journal Entries',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='MentorshipRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('goals', models.TextField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentored', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentoring', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to='backend.mentorshipprogram')),
            ],
            options={
                'unique_together': {('program', 'mentor', 'mentee')},
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_value', models.JSONField(help_text='JSON value of the answer (format depends on question type)')),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('assessment_response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_responses', to='backend.assessmentresponse')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.question')),
            ],
            options={
                'unique_together': {('assessment_response', 'question')},
            },
        ),
        migrations.CreateModel(
            name='SupportGroupAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='backend.supportgroupparticipant')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='backend.supportgroupsession')),
            ],
            options={
                'unique_together': {('session', 'participant')},
            },
        ),
        migrations.CreateModel(
            name='SavedResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text="User's notes about this resource", null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_resources', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by', to='backend.wellnessresource')),
            ],
            options={
                'ordering': ['-saved_at'],
                'unique_together': {('user', 'resource')},
            },
        ),
        migrations.CreateModel(
            name='ResourceRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_ratings', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='backend.wellnessresource')),
            ],
            options={
                'unique_together': {('user', 'resource')},
            },
        ),
    ]
